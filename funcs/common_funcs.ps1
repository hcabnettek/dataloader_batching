# function to check the CSV files generated by data loader for errors
function CheckErrorFile {

    Param ([string]$perrorfilepath)

    $csvlines = (Get-Content $perrorfilepath | Measure-Object -line).Lines
    
    # header is always 1 row so we look for > 1 rows
    if ($csvlines -gt 1)
    {
        $errorCount = $csvLines - 1
        $errorMessage = [string]::Format("** errors ** {0} failed rows in {1}", $errorCount, $perrorfilepath)
        # this will print red error message but not stop execution
        write-error $errorMessage
    }
    
}

function Format-XML ([xml]$xml, $indent=2) 
{ 
    #Credit to: https://devblogs.microsoft.com/powershell/format-xml/
    #Used to "pretty up" the XML text...not needed other than to show the XML output
    $Stringwriter = New-Object System.IO.StringWriter 
    $XmlWriter = New-Object System.XMl.XmlTextWriter $StringWriter
    $xmlWriter.Formatting = “indented” 
    $xmlWriter.Indentation = $Indent 
    $xml.WriteContentTo($XmlWriter) 
    $XmlWriter.Flush() 
    $StringWriter.Flush() 
    Write-Output $StringWriter.ToString()
}

# function to execute query and write results to CSV
function SqlToCsv {

  Param ([string]$pconnectionString, [string]$pquery, [string]$pextractFolder, [string]$pextractFile)

  $extractPath = [string]::Format("{0}{1}", $pextractFolder, $pextractFile)

  $connection = New-Object System.Data.SqlClient.SqlConnection
  $connection.ConnectionString = $pconnectionString

  $command = New-Object System.Data.SqlClient.SqlCommand
  $command.CommandText = $pquery
  $command.Connection = $connection

  $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
  $SqlAdapter.SelectCommand = $command
  $DataSet = New-Object System.Data.DataSet
  $SqlAdapter.Fill($DataSet)
  $connection.Close()

  # dump the data to a csv
  # http://technet.microsoft.com/en-us/library/ee176825.aspx
  $DataSet.Tables[0] | Export-Csv $extractPath –notypeinformation
}